openapi: 3.0.3
info:
  version: 1.0.0
  title: WorkLogs API
  description: API
  contact:
    email: michal.dering@globallogic.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:5000/v1
paths:

  '/users/login':
    post:
      summary: Logs user into the system
      operationId: loginUser
      tags:
        - user
      requestBody:
        description: Data for login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginData'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginOutput"
        #'400':
        #  description: Invalid username/password supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
                
  '/users':
    get:
      summary: Get all users
      operationId: getUsers
      tags:
        - user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfUsers"
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    post:
      summary: Add a new user
      operationId: addUser
      tags:
        - user
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToAdd'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '409':
          description: Could not add a user. Database error. Possible conflict.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
          
  '/users/{id}':
    get:
      summary: Get user by id
      operationId: getUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: id of the user that needs to be fetched
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        #'400':
        #  description: Invalid username supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    put:
      summary: Update user
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: id of the user that needs to be updated
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: User object for update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdated'
        #'400':
        #  description: Invalid user supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    delete:
      summary: Delete user
      operationId: deleteUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: id of the user that needs to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
                schema:
                  $ref: "#/components/schemas/UserDeleted"
        #'400':
        #  description: Invalid username supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"

  '/tasks':
    get:
      summary: Get all tasks
      operationId: getTasks
      tags:
        - task
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    post:
      summary: Add a new task
      operationId: addTask
      tags:
        - task
      requestBody:
        description: Task object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskToAdd'
      responses:
        '201':
          description: Success
          # TODO empty schema
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
          
  '/tasks/{id}':
    get:
      summary: Get task by id
      operationId: getTask
      tags:
        - task
      parameters:
        - name: id
          in: path
          description: id of the task that needs to be fetched
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        #'400':
        #  description: Invalid username supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    put:
      summary: Update task
      operationId: updateTask
      tags:
        - task
      parameters:
        - name: id
          in: path
          description: id of the task that needs to be updated
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Task object for update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskToUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdated'
        #'400':
        #  description: Invalid user supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    delete:
      summary: Delete task
      operationId: deleteTask
      tags:
        - task
      parameters:
        - name: id
          in: path
          description: id of the task that needs to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskDeleted"
        #'400':
        #  description: Invalid username supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
  
  '/worklogs':
    get:
      summary: Get all workLogs
      operationId: getWorkLogs
      tags:
        - worklog
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLog'
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: WorkLog not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    post:
      summary: Add a new workLog
      operationId: addWorkLog
      tags:
        - worklog
      requestBody:
        description: WorkLog object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkLogToAdd'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLogAdded'
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
          
  '/worklogs/{id}':
    get:
      summary: Get workLog by id
      operationId: getWorkLog
      tags:
        - worklog
      parameters:
        - name: id
          in: path
          description: id of the workLog that needs to be fetched
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLog'
        #'400':
        #  description: Invalid username supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: WorkLog not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    put:
      summary: Update workLog
      operationId: updateWorkLog
      tags:
        - worklog
      parameters:
        - name: id
          in: path
          description: id of the workLog that needs to be updated
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: WorkLog object for update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkLogToUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLogUpdated'
        #'400':
        #  description: Invalid user supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: WorkLog not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"
    delete:
      summary: Delete workLog
      operationId: deleteWorkLog
      tags:
        - worklog
      parameters:
        - name: id
          in: path
          description: id of the workLog that needs to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        #'400':
        #  description: Invalid username supplied
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        '404':
          description: WorkLog not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultServerError"

security:
  - bearerAuth: []           
          
components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
  
    UnauthorizedError:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        result:
          type: array
          items: {}
          
    NotFoundError:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        result:
          type: array
          items: {}
          
    DefaultServerError:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        result:
          type: array
          items: {}
          
    ConflictError:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        responseMessage:
          type: string
      
    UserLoginData:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
          
    UserLoginOutput:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        result:
          type: array
          items: {}
        token:
          type: string
          
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userName:
          type: string
        passwordHash:
          type: string
        salt:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        active:
          type: boolean
        comment:
          type: string
          
    ArrayOfUsers:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: int32
          userName:
            type: string
          passwordHash:
            type: string
          salt:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          active:
            type: boolean
          comment:
            type: string

    UserToAdd:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        active:
          type: boolean
          default: true
        comment:
          type: string
          
    UserToUpdate:
      type: object
      properties:
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        active:
          type: boolean
          default: true
        comment:
          type: string
    
    UserUpdated:
      type: object
      properties:
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        active:
          type: boolean
        comment:
          type: string
          
    UserDeleted:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        responseMessage:
          type: string
          
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        summary:
          type: string
        status:
          type: string
          description: Task Status
          enum:
            - new
            - inprogress
            - done
  
    TaskToAdd:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        summary:
          type: string
        status:
          type: string
          description: Task Status
          enum:
            - new
            - inprogress
            - done
            
    TaskToUpdate:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        summary:
          type: string
        status:
          type: string
          description: Task Status
          enum:
            - new
            - inprogress
            - done
            
    TaskUpdated:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        summary:
          type: string
        status:
          type: string
          description: Task Status
          enum:
            - new
            - inprogress
            - done
            
    TaskDeleted:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        result:
          type: array
          items: {}
    
    WorkLog:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        taskId:
          type: integer
          format: int32
        reportedHours:
          type: integer
          format: int32
      
    WorkLogToAdd:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        taskId:
          type: integer
          format: int32
        reportedHours:
          type: integer
          format: int32
          
    WorkLogAdded:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        result:
          type: array
          items: {}
          
    WorkLogToUpdate:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        taskId:
          type: integer
          format: int32
        reportedHours:
          type: integer
          format: int32
          
    WorkLogUpdated:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        taskId:
          type: integer
          format: int32
        reportedHours:
          type: integer
          format: int32
  